#!/usr/bin/env node

/**
 * Module dependencies.
 */

// var app = require('../app');
var debug = require('debug')('campaign-server:server');
var http = require('http');
var cluster = require('cluster');
var os = require('os');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '30022');
var server;
cluster.schedulingPolicy = cluster.SCHED_RR;

function startClusterMaster(){
  console.log('[Enter Master Cluster]');

  var cpuNumber = os.cpus().length;
  var worker;

  for(var i = 0; i < cpuNumber; i++){
    worker = cluster.fork();
  }

  cluster.on('fork', function(worker){
    console.log('[Worker Forked]: ' + worker.process.pid);
  })

  cluster.on('online', function(worker){
    console.log('[Worker Online]: ' + worker.process.pid);
  });

  cluster.on('message', function(worker, message, handle){
    console.log('[Worker Send Message]: '+ worker.process.pid +' \'' + message + '\'');

    switch (message) {
      case 'quit':
        process.exit(0);
        break;
      case 'kill':
        worker.kill();
        break;
      case 'list':
        for(const id in cluster.workers){
          console.log(cluster.workers[id].process.pid);
        }
        break;
      case 'detail':
        for(const id in cluster.workers){
          console.log(cluster.workers[id]);
        }
        break;
      default:
        break;
    }
  });

  cluster.on('exit', function(worker, code, signal){
    console.log('[Worker Exit]: ' + worker.process.pid);
    console.log('[Kill Status Code]: ' + code);

    if(code === 200){
      setTimeout(function(){
        cluster.fork();
      }, 1000);
    }else if(code === null){
      console.log('test kill');
      setTimeout(function(){
        cluster.fork();
        console.log('[Number of Workers]:' + Object.keys(cluster.workers).length);
      }, 1000);
    }
  });
}

function startClusterWorker(){
  console.log('[Enter Worker Cluster]');

  var app = require('../app');

  app.set('port', port);
  server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function (command)
  {
      var i;
      // 끝부분의 newline character들을 없앤다.
      for (i = command.length - 1;
           (i >= 0) && ((command.charAt(i) === '\r') || (command.charAt(i) === '\n'));
           i--);
      if (i >= 0)
          command = command.substring(0, i + 1);
      getCommand(command);
  });

  process.on('message', function(message){
    console.log('[Master Send Message]: \'' + message + '\'');
  });
}

function getCommand(command){
  console.log('[Command Input]: \'' + command + '\'');
  process.send(command);
}

function startCluster(){
  return (cluster.isMaster) ? startClusterMaster() : startClusterWorker();
}

startCluster();

// app.set('port', port);
//
// /**
//  * Create HTTP server.
//  */
//
// var server = http.createServer(app);
//
// /**
//  * Listen on provided port, on all network interfaces.
//  */
//
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
